{"ast":null,"code":"var _jsxFileName = \"/Users/sangwon/Desktop/Github-Repos/JourneyVis/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Tree from \"react-d3-tree\";\nimport orgChartJson from \"./data/treeData.json\";\nimport { useCenteredTree } from \"./helpers\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyles = {\n  width: \"100vw\",\n  height: \"100vh\"\n};\n\n// Here we're using `renderCustomNodeElement` render a component that uses\n// both SVG and HTML tags side-by-side.\n// This is made possible by `foreignObject`, which wraps the HTML tags to\n// allow for them to be injected into the SVG namespace.\nconst renderForeignObjectNode = ({\n  nodeDatum,\n  toggleNode,\n  foreignObjectProps\n}) => /*#__PURE__*/_jsxDEV(\"g\", {\n  children: /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n    ...foreignObjectProps,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: \"1px solid black\",\n        backgroundColor: \"#dedede\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: nodeDatum.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 21,\n  columnNumber: 3\n}, this);\nconst CustomNode = ({\n  nodeDatum\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  style: {/* Your custom styles here */},\n  children: nodeDatum.name\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 37,\n  columnNumber: 3\n}, this);\n_c = CustomNode;\nexport default function App() {\n  _s();\n  const [translate, containerRef] = useCenteredTree();\n  const nodeSize = {\n    x: 200,\n    y: 200\n  };\n  const foreignObjectProps = {\n    width: nodeSize.x,\n    height: nodeSize.y,\n    x: 20\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: containerStyles,\n    ref: containerRef,\n    children: /*#__PURE__*/_jsxDEV(Tree, {\n      data: data,\n      orientation: \"horizontal\",\n      renderCustomNodeElement: rd3tProps => /*#__PURE__*/_jsxDEV(CustomNode, {\n        ...rd3tProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 47\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"9B25YRDZ5t4fkTB737Vl0GrOdiQ=\", false, function () {\n  return [useCenteredTree];\n});\n_c2 = App;\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomNode\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","Tree","orgChartJson","useCenteredTree","jsxDEV","_jsxDEV","containerStyles","width","height","renderForeignObjectNode","nodeDatum","toggleNode","foreignObjectProps","children","style","border","backgroundColor","textAlign","name","fileName","_jsxFileName","lineNumber","columnNumber","CustomNode","_c","App","_s","translate","containerRef","nodeSize","x","y","ref","data","orientation","renderCustomNodeElement","rd3tProps","_c2","$RefreshReg$"],"sources":["/Users/sangwon/Desktop/Github-Repos/JourneyVis/client/src/App.js"],"sourcesContent":["import React from \"react\";\nimport Tree from \"react-d3-tree\";\nimport orgChartJson from \"./data/treeData.json\";\nimport { useCenteredTree } from \"./helpers\";\nimport \"./App.css\";\n\nconst containerStyles = {\n  width: \"100vw\",\n  height: \"100vh\"\n};\n\n// Here we're using `renderCustomNodeElement` render a component that uses\n// both SVG and HTML tags side-by-side.\n// This is made possible by `foreignObject`, which wraps the HTML tags to\n// allow for them to be injected into the SVG namespace.\nconst renderForeignObjectNode = ({\n  nodeDatum,\n  toggleNode,\n  foreignObjectProps\n}) => (\n  <g>\n    {/* <circle r={15}></circle> */}\n    <foreignObject {...foreignObjectProps}>\n      <div style={{ border: \"1px solid black\", backgroundColor: \"#dedede\" }}>\n        <h3 style={{ textAlign: \"center\" }}>{nodeDatum.name}</h3>\n        {/* {nodeDatum.children && (\n          <button style={{ width: \"100%\" }} onClick={toggleNode}>\n            {nodeDatum.__rd3t.collapsed ? \"Expand\" : \"Collapse\"}\n          </button>\n        )} */}\n      </div>\n    </foreignObject>\n  </g>\n);\n\nconst CustomNode = ({ nodeDatum }) => (\n  <div style={{ /* Your custom styles here */ }}>\n    {nodeDatum.name}\n    {/* Add more content as needed */}\n  </div>\n);\n\nexport default function App() {\n  const [translate, containerRef] = useCenteredTree();\n  const nodeSize = { x: 200, y: 200 };\n  const foreignObjectProps = { width: nodeSize.x, height: nodeSize.y, x: 20 };\n  return (\n    <div style={containerStyles} ref={containerRef}>\n      {/* <Tree\n        data={orgChartJson}\n        translate={translate}\n        nodeSize={nodeSize}\n        renderCustomNodeElement={(rd3tProps) =>\n          renderForeignObjectNode({ ...rd3tProps, foreignObjectProps })\n        }\n        orientation=\"horizontal\"\n      /> */}\n      <Tree\n      data={data}\n      orientation=\"horizontal\"\n      renderCustomNodeElement={(rd3tProps) => <CustomNode {...rd3tProps} />}\n      />\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,eAAe;AAChC,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,SAASC,eAAe,QAAQ,WAAW;AAC3C,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,eAAe,GAAG;EACtBC,KAAK,EAAE,OAAO;EACdC,MAAM,EAAE;AACV,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMC,uBAAuB,GAAGA,CAAC;EAC/BC,SAAS;EACTC,UAAU;EACVC;AACF,CAAC,kBACCP,OAAA;EAAAQ,QAAA,eAEER,OAAA;IAAA,GAAmBO,kBAAkB;IAAAC,QAAA,eACnCR,OAAA;MAAKS,KAAK,EAAE;QAAEC,MAAM,EAAE,iBAAiB;QAAEC,eAAe,EAAE;MAAU,CAAE;MAAAH,QAAA,eACpER,OAAA;QAAIS,KAAK,EAAE;UAAEG,SAAS,EAAE;QAAS,CAAE;QAAAJ,QAAA,EAAEH,SAAS,CAACQ;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMtD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACf,CACJ;AAED,MAAMC,UAAU,GAAGA,CAAC;EAAEb;AAAU,CAAC,kBAC/BL,OAAA;EAAKS,KAAK,EAAE,CAAE,8BAAgC;EAAAD,QAAA,EAC3CH,SAAS,CAACQ;AAAI;EAAAC,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAEZ,CACN;AAACE,EAAA,GALID,UAAU;AAOhB,eAAe,SAASE,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGzB,eAAe,CAAC,CAAC;EACnD,MAAM0B,QAAQ,GAAG;IAAEC,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAI,CAAC;EACnC,MAAMnB,kBAAkB,GAAG;IAAEL,KAAK,EAAEsB,QAAQ,CAACC,CAAC;IAAEtB,MAAM,EAAEqB,QAAQ,CAACE,CAAC;IAAED,CAAC,EAAE;EAAG,CAAC;EAC3E,oBACEzB,OAAA;IAAKS,KAAK,EAAER,eAAgB;IAAC0B,GAAG,EAAEJ,YAAa;IAAAf,QAAA,eAU7CR,OAAA,CAACJ,IAAI;MACLgC,IAAI,EAAEA,IAAK;MACXC,WAAW,EAAC,YAAY;MACxBC,uBAAuB,EAAGC,SAAS,iBAAK/B,OAAA,CAACkB,UAAU;QAAA,GAAKa;MAAS;QAAAjB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAE;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACI,EAAA,CAtBuBD,GAAG;EAAA,QACStB,eAAe;AAAA;AAAAkC,GAAA,GAD3BZ,GAAG;AAAA,IAAAD,EAAA,EAAAa,GAAA;AAAAC,YAAA,CAAAd,EAAA;AAAAc,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}